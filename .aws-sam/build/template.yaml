AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'SAM Template for React app hosted with S3 and CloudFront

  '
Globals:
  Function:
    Timeout: 30
    LoggingConfig:
      LogFormat: JSON
Resources:
  WebAppS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Fn::Sub: ${AWS::StackName}-web-app-s3-bucket
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
  ExpressAPI:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Cors:
        AllowMethods: '''GET,POST,OPTIONS'''
        AllowHeaders: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
        AllowOrigin: '''*'''
  ExpressAPIFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ExpressAPIFunction
      Handler: app.lambdaHandler
      Runtime: nodejs20.x
      Architectures:
      - x86_64
      Events:
        APIRouting:
          Type: Api
          Properties:
            RestApiId:
              Ref: ExpressAPI
            Path: /{proxy+}
            Method: ANY
    Metadata:
      SamResourceId: ExpressAPIFunction
  WebAppS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: WebAppS3Bucket
      PolicyDocument:
        Id: PolicyForCloudFrontPrivateContent
        Version: '2012-10-17'
        Statement:
        - Sid: AllowCloudFrontServicePrincipal
          Effect: Allow
          Principal:
            Service: cloudfront.amazonaws.com
          Action: s3:GetObject
          Resource:
            Fn::Sub: arn:aws:s3:::${AWS::StackName}-web-app-s3-bucket/*
          Condition:
            StringEquals:
              AWS:SourceArn:
                Fn::Sub: arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistribution}
  WebAppOriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name:
          Fn::Sub: ${AWS::StackName}-web-app-origin-access-control
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4
  CloudFrontOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment:
          Fn::Sub: ${AWS::StackName}-OAI
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
        - DomainName:
            Fn::GetAtt:
            - WebAppS3Bucket
            - RegionalDomainName
          Id:
            Fn::Sub: ${AWS::StackName}-web-app-s3-origin
          S3OriginConfig:
            OriginAccessIdentity:
              Fn::Sub: origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}
        Enabled: true
        DefaultRootObject: index.html
        DefaultCacheBehavior:
          AllowedMethods:
          - GET
          - HEAD
          - OPTIONS
          TargetOriginId:
            Fn::Sub: ${AWS::StackName}-web-app-s3-origin
          ViewerProtocolPolicy: redirect-to-https
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
        PriceClass: PriceClass_All
        CustomErrorResponses:
        - ErrorCode: 404
          ResponseCode: 200
          ResponsePagePath: /index.html
        - ErrorCode: 403
          ResponseCode: 200
          ResponsePagePath: /index.html
Outputs:
  WebAppDomain:
    Value:
      Fn::GetAtt:
      - CloudFrontDistribution
      - DomainName
  CloudFrontDistributionId:
    Value:
      Fn::GetAtt:
      - CloudFrontDistribution
      - Id
  WebAppS3BucketName:
    Value:
      Ref: WebAppS3Bucket
  ExpressAPIFunction:
    Description: API Gateway endpoint URL for Prod stage for API function
    Value:
      Fn::Sub: https://${ExpressAPI}.execute-api.${AWS::Region}.amazonaws.com/Prod/{proxy+}/
  APIRouting:
    Description: Hello World Lambda Function ARN
    Value:
      Fn::GetAtt:
      - ExpressAPIFunction
      - Arn
  APIRoutingIamRole:
    Description: Implicit IAM Role created for Hello World function
    Value:
      Fn::GetAtt:
      - ExpressAPIFunction
      - Arn
